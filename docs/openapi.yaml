openapi: 3.0.0
servers:
    # Added by API Auto Mocking Plugin
    - description: SwaggerHub API Auto Mocking
      url: https://virtserver.swaggerhub.com/WebEngineering2/bookUniverse/1.0.0
info:
    description: WebEngineering2 Project - booksUniverse
    version: "1.0.0"
    title: booksUniverse
    contact:
        email: inf20109@lehre.dhbw-stuttgart.de
    license:
        name: Apache 2.0
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
    - name: user
      description: User Requests
    - name: book
      description: Book Requests
    - name: borrowed
      description: Borrowed Relation Requests
paths:
    /borrowed:
      post:
        tags:
          - borrowed
        summary: creates entry to borrow book
        parameters:
          - in: header
            name: userId
            required: true
            schema:
              type: string
          - in: header
            name: bookId
            required: true
            schema:
              type: string
          - in: header
            name: startDate
            required: true
            schema:
              type: string
              format: date
          - in: header
            name: endDate
            required: true
            schema:
              type: string
              format: date
        responses:
          "200":
            description: Borrowed Entry was created
          "400":
            description: Bad Request

    /borrowed/{userId}:
      get:
        tags:
          - borrowed
        summary: shows list of currently borrowed books
        parameters:
          - in: path
            name: userId
            required: true
            schema:
              type: string
        responses:
          "200":
            description: user was found
            content:
              application/json:
                schema:
                  type: array
                  $ref: "#/components/schemas/borrowedList"
          "400":
            description: Bad Request
          "404":
            description: user was not found
    /borrowed/{id}:
      put:
        tags:
          - borrowed
        summary: updates borrowed entry
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
          - in: header
            name: endDate
            required: false
            schema:
              type: string
          - in: header
            name: progress
            required: false
            schema:
              type: object
        responses:
          "200":
            description: entry was updated
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/borrowed"
          "400":
            description: Bad Request
          "404":
            description: entry was not found
    /borrowed/borrowedBookInfo/{userId}/{bookId}:
      get:
        tags:
          - borrowed
        summary: shows information of selected borrowed book
        parameters:
          - in: path
            name: userId
            required: true
            schema:
              type: string
          - in: path
            name: bookId
            required: true
            schema:
              type: string
        responses:
          "200":
            description: borrowed book was found
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/borrowed"
          "400":
            description: Bad Request
          "404":
            description: borrowed book was not found
    /borrowed/borrowedBookInfo/{id}:
      get:
        tags:
          - borrowed
        summary: shows information of selected borrowed book
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
        responses:
          "200":
            description: borrowed book was found
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/borrowed"
          "400":
            description: Bad Request
          "404":
            description: borrowed book was not found
    /borrowed/borrowedBookIds/{userId}:
      get:
        tags:
          - borrowed
        summary: gets list of bookIds user has currently borrowed
        parameters:
          - in: path
            name: userId
            required: true
            schema:
              type: string
        responses:
          "200":
            description: entries were found
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: string
                    example: "e6804esver6048v"

          "400":
            description: Bad Request
          "404":
            description: user was not found
    /user:
      post:
        tags:
          - user
        summary: create user
        parameters:
          - in: header   
            name: userName
            required: true
            schema:
              type: string
          - in: header
            name: email
            required: true
            schema:
              type: string
              format: email
          - in: header
            name: dateOfBirth
            required: true
            schema:
              type: string
              format: date
          - in: header
            name: country
            required: true
            schema:
              type: string
          - in: header
            name: paymentmethodId
            required: true
            schema:
              type: string
          - in: header
            name: subModelId
            required: true
            schema:
              type: string
          - in: header
            name: pswd
            required: true
            schema:
              type: string
              format: password
        responses:
            '200':
                description: OK
                content:
                  application/json:
                    schema:
                      type: object
                      $ref: "#/components/schemas/user"
            "400":
              description: Bad Request
          
    /user/{email}/{pswd}:
      get:
        tags:
          - user
        summary: gets user information
        parameters:
          - in: path
            name: email
            required: true
            schema:
              type: string
          - in: path
            name: pswd
            required: true
            schema:
              type: string
        responses:
          "200":
            description: user was found
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/user"
          "400":
            description: Bad Request
          "404":
            description: user was not found
    /user/{email}:
      get:
        tags:
          - user
        summary: gets user information
        parameters:
          - in: path
            name: email
            required: true
            schema:
              type: string
        responses:
          "200":
            description: user was found
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/user"
          "400":
            description: Bad Request
          "404":
            description: user was not found
      
    /user/{userId}:
      get:
        tags:
          - user
        summary: gets user information
        parameters:
          - in: path
            name: userId
            required: true
            schema:
              type: string
        responses:
          "200":
            description: user was found
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/user"
          "400":
            description: Bad Request
          "404":
            description: user was not found

      put:
        tags:
          - user
        summary: updates user information
        parameters:
          - in: path   
            name: userId
            required: true
            schema:
              type: string
          - in: header   
            name: userName
            required: false
            schema:
              type: string
          - in: header
            name: email
            required: false
            schema:
              type: string
              format: email
          - in: header
            name: dateOfBirth
            required: false
            schema:
              type: string
              format: date
          - in: header
            name: country
            required: false
            schema:
              type: string
          - in: header
            name: paymentmethodId
            required: false
            schema:
              type: string
          - in: header
            name: subModelId
            required: false
            schema:
              type: string
          - in: header
            name: pswd
            required: false
            schema:
              type: string
              format: password
        responses:
            '200':
                description: OK
                content:
                  application/json:
                    schema:
                      type: object
                      $ref: "#/components/schemas/user"
            "400":
              description: Bad Request
            "404":
              description: User not found
    /book:
      get:
        tags:
          - book
        summary: get list of all books
        responses:
          "200":
            description: request was successful
            content:
              application/json:
                schema:
                  type: array
                  $ref: "#/components/schemas/bookList"
    /book/{bookId}:
        get:
          tags:
            - book
          summary: gets book information
          parameters:
            - in: path
              name: bookId
              required: true
              schema:
                  type: string
          responses:
              "200":
                  description: book was found
                  content:
                    application/json:
                      schema:
                          type: object  
                          $ref: "#/components/schemas/book"                    
              "404":
                  description: book was not found
    /paymentMethod:
        get:
          tags:
            - paymentmethod
          summary: gets list of payment methods
          responses:
              "200":
                  description: Request was successful
                  content:
                    application/json:
                      schema:
                          type: array
                          $ref: "#/components/schemas/paymentMethodList"
    /subModel:
        get:
          tags:
            - subModel
          summary: gets list of subscription models
          responses:
              "200":
                  description: Request was successful
                  content:
                    application/json:
                      schema:
                          type: array
                          $ref: "#/components/schemas/subModelList"
components:
    schemas:
        user:
          type: object
          required:
            - id
            - name
            - email
            - pswd
            - userName
            - dateOfBirth
            - paymentmethodId
            - country
            - subModelId
          properties:
            id:
              type: string
              example: 85469
            name:
              type: string
              example: "Max Mustermann"
            email:
              type: string
              format: email
              example: "max@mustermann@gmx.de"
            pswd:
              type: string
              format: password
              example: acd62bb6efabc81a
            userName:
              type: string
              example: max7078_89
            dateOfBirth:
              type: string
              format: date
              example: "1989-11-11"
            paymentMethodId:
              type: string
              example: 26475
            country:
              type: string
              example: "DE"
            subModelId:
              type: string
              example: 47586
        borrowed:
          type: object
          required:
            - "id"
            - "userId"
            - "bookId"
            - "startDate"
            - "endDate"
            - "progress"
          properties:
            id:
              type: string
              example: "5604se6f0s8e4f"
            userId:
              type: string
              example: "5s0df840s9f840"
            bookId:
              type: string
              example: "490se9089409se0r9c40e"
            startDate:
              type: string
              format: date
              example: "2021-05-03"
            endDate:
              type: string
              format: date
              example: "2021-06-03"
            progress:
              type: object
              example: {start: {}, end: {}}
            book:
              type: object
              $ref: "#components/schemas/book"
        borrowedList:
          type: array
          items:
            $ref: "#/components/schemas/borrowed"
            example:
              Example1:
                $ref: "#/components/schemas/borrowed"
              Example2:
                $ref: "#/components/schemas/borrowed"
        book:
          type: object
          required:
            - id
            - title
            - ISBN13
            - author
            - content
          properties:
            id:
              type: string
              example: 59586
            title:
              type: string
              example: "Harry Potter"
            subtitle:
              type: string
              example: "Der Stein der Weisen"
            pageCount:
              type: integer
              example: 235
            ISBN13:
              type: integer          
              example: 7898159198542
            coverUrl:
              type: string
              example: "http://books.google.com/books/content?id=XvApAQAAMAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"
            language:
              type: string
              example: "english"
            description:
              type: string
              example: "Eigentlich hatte Harry geglaubt, er sei ein ganz normaler Junge. Zumindest bis zu seinem elften Geburtstag. Da erfährt er, dass er sich an der Schule für Hexerei und Zauberei einfinden soll. Und warum? Weil Harry ein Zauberer ist. Und so wird für Harry das erste Jahr in der Schule das spannendste, aufregendste und lustigste in seinem Leben. Er stürzt von einem Abenteuer in die nächste ungeheuerliche Geschichte, muss gegen Bestien, Mitschüler und Fabelwesen kämpfen. Da ist es gut, dass er schon Freunde gefunden hat, die ihm im Kampf gegen die dunklen Mächte zur Seite stehen."
            author:
              type: array
              $ref: "#/components/schemas/author"
            content:
              type: string
              example: "Contains the entire content/text of the book."
        bookList:
          type: array
          items:
            $ref: "#/components/schemas/book"
            example:
              Example1:
                $ref: "#/components/schemas/book"
              Example2:
                $ref: "#/components/schemas/book"

        author:
          type: object
          required:
            - authorId
            - name
          properties:
            authorId:
              type: string
              example: 13451
            name:
              type: string
              example: "J.K. Rowling"

        genre:
          type: object
          required:
            - genreId
            - name
          properties:
            genreId:
              type: string
              example: 19823
            name:
              type: string
              example: "fantasy"
        genreList:
          type: array
          items:
            $ref: "#/components/schemas/genre"
            example:
              Example1:
                $ref: "#/components/schemas/genre"
              Example2:
                $ref: "#/components/schemas/genre"

              
        subModel:
          type: object
          required:
            - subModelId
            - name
          properties:
            subModelId:
              type: string
              example: 98231
            name:
              type: string
              example: "premium"

        subModelList:
          type: array
          items:
            $ref: "#/components/schemas/subModel"
            example:
              Example1:
                $ref: "#/components/schemas/subModel"
              Example2:
                $ref: "#/components/schemas/subModel"


        paymentMethod:
          type: object
          required:
            - paymentMethodId
            - name
          properties:
            paymentMethodId:
              type: string
              example: 12345
            name:
              type: string
              example: "credit card"
        paymentMethodList:
          type: array
          items:
            $ref: "#/components/schemas/paymentMethod"
            example:
              Example1:
                $ref: "#/components/schemas/paymentMethod"
              Example2:
                $ref: "#/components/schemas/paymentMethod"
